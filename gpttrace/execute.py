import os
import shutil
import tempfile

from gpttrace.utils.common import get_doc_content_for_query, init_conversation
from gpttrace.utils.prompt import construct_running_prompt

def execute(user_input: str, need_train, verbose: bool = False) -> None:
    """
    Convert the user request into a BPF command and execute it.

    :param user_input: The user's request.
    :param need_train: Whether to use the vector database.
    :param verbose: Whether to print extra information.
    """
    agent_chain, index = init_conversation(need_train, verbose)
    print("Sending query to ChatGPT: " + user_input)
    prompt = construct_running_prompt(user_input)
    if index is not None:
        info = get_doc_content_for_query(index, user_input)
        if info is not None:
            prompt = prompt + info
    response = agent_chain.predict(input=prompt)
    parsed = make_executable_command(response)
    print(f"The command generated by gpt is: {parsed}")
    print("Press Ctrl+C to stop the command....")
    normal_exit = False
    stderr_out = tempfile.mktemp()
    for _ in range(5):
        print(f"Get the command from gpt: {parsed}, running...")
        ret_val = os.system(f"sudo {parsed} 2> {stderr_out}")
        if ret_val != 0:
            with open(stderr_out, "r", encoding='utf-8') as file:
                stderr_content = file.read()
            print(
                f"Failed to run bpftrace with command generated by gpt: {parsed}")
            if verbose:
                print(f"Error message: {stderr_content}\n")
            print("Sending errors to ChatGPT and re-execute....\n")
            response = agent_chain.predict(
                input=f"bpftrace gives me the following error on command you generated: `{stderr_content}`, please fix the command according to this error. Remember, just return the command without another information.")
            parsed = make_executable_command(response)
            if verbose:
                print(response)
            if (not parsed.startswith("bpftrace")) or (not parsed.startswith("sudo")):
                continue
        else:
            normal_exit = True
            break
    shutil.rmtree(stderr_out, True)
    if not normal_exit:
        print("Retry times exceeded...")

def make_executable_command(command: str) -> str:
    """
    Remove extra characters from the command from the LLM return result

    :param command: The command from the LLM.
    :return: The result of the processing.
    """
    if command.startswith("\n"):
        command = command[1:]
    if command.endswith("\n"):
        command = command[:-1]
    if command.startswith("`"):
        command = command[1:]
    if command.endswith("`"):
        command = command[:-1]
    command = command.strip()
    command = command.split("User: ")[0]
    return command
